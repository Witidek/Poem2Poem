(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'testtest'"
p3
sS'layer'
p4
S'C:\\Users\\Jason\\Downloads\\web2py\\applications\\P2P\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\n\ndef index():\n    return locals()\n\n\ndef user():\n    return dict(form=auth())\n\ndef browse():\n    rows = db(db.poem).select()\n    return locals()\n\ndef search():\n    rows = db(db.poem).select()\n    searchKey = ""\n    searchType = \'Poems\'\n    form = FORM(\'Search: \',\n              INPUT(_name=\'search\'),\n              \'    Search By:  \',\n              INPUT(_type =\'radio\', _name = \'searchType\', _value = \'Poems\', _checked="checked"), \'  Poems \',\n              INPUT(_type =\'radio\', _name = \'searchType\', _value = \'Authors\'),\'  Authors  \',\n              INPUT(_type=\'submit\'))\n    if form.accepts(request,session):\n        searchKey = form.vars.search\n        searchType = form.vars.searchType\n\n    return locals()\n\ndef test():\n    import urllib\n    import urllib2\n    from gluon.contrib import simplejson\n    url = \'http://rhymebrain.com/talk\'\n    data = {}\n    data[\'function\'] = \'getRhymes\'\n    data[\'word\'] = \'fire\'\n    url_values = urllib.urlencode(data)\n    full_url = url + \'?\' + url_values\n    data = urllib2.urlopen(full_url)\n    result = data.read()\n    parsed_json = simplejson.loads(result)\n    return locals()\n\ndef poem():\n    # Redirect to poem browser if no argument for poem id\n    if not request.args(0): redirect(URL(\'browse\'))\n\n    # Load poem using the URL argument as poem id\n    poem = db.poem(request.args(0,cast=int))\n    rows = db(db.newline.poem_id == poem.id).select(orderby=db.newline.line_number)\n    contributors = db(db.newline.poem_id == poem.id).select(db.newline.author, groupby=db.newline.author)\n\n    return locals()\n\n@auth.requires_login()\ndef create():\n    form = SQLFORM(db.poem, fields=[\'title\', \'body\', \'permission\'], labels = {\'body\':\'First two lines\'}).process()\n    if form.accepted:\n        # Create a new insert into permission table if poem was created Private (give owner permission)\n        if form.vars.permission == \'Private\':\n            db.permission.insert(user_id = auth.user, poem_id = form.vars.id)\n        redirect(URL(\'browse\'))\n    return locals()\n\n@auth.requires_login()\ndef edit():\n    # Redirect to poem browser if no argument for poem id\n    if not request.args(0): redirect(URL(\'browse\'))\n\n    # Load poem using the URL argument as poem id\n    poem_id = request.args(0,cast=int)\n    poem = db.poem(poem_id)\n\n    # Redirect if current user is not owner of poem\n    if poem.author != auth.user.id:\n        session.flash = \'You are not the owner of this poem and cannot edit it\'\n        redirect(URL(\'poem\',args=poem.id))\n\n    # Create SQLFORM\n    form = SQLFORM(db.poem, record=poem, fields=[\'title\',\'body\']).process()\n    lines = db(db.newline.poem_id == poem_id).select(orderby=db.newline.line_number)\n    lines_form = []\n    for line in lines:\n        lines_form.append(SQLFORM(db.newline, record=line.id, showid=False, deletable=True, submit_button = \'Delete\', fields=[\'line\']).process())\n    #\n    if form.accepted: redirect(URL(\'browse\'))\n    forms = FORM(\'Username: \',\n              INPUT(_name=\'username\'),\n              INPUT(_type=\'submit\'))\n    if forms.accepts(request,session):\n        added = False\n        for users in db(db.auth_user).select():\n            if(users.username == forms.vars.username):\n                for permission in db(db.permission).select():\n                    if(permission.user_id == users.id and permission.poem_id == poem.id):\n                        response.flash = \'Already Added\'\n                    else:\n                        added = True\n                if(added == True):\n                    db.permission.insert(user_id = users.id , poem_id = poem.id)\n                    response.flash = \'Added\'\n    return locals()\n\n@auth.requires_login()\ndef add():\n    import urllib\n    import urllib2\n    from gluon.contrib import simplejson\n    # Redirect to poem browser if no argument for poem id\n    if not request.args(0): redirect(URL(\'browse\'))\n\n    # Load poem using the URL argument as poem id\n    poem = db.poem(request.args(0,cast=int))\n    rows = db(db.newline.poem_id == poem.id).select(orderby=db.newline.line_number)\n\n    # Check if poem is private and if current user has proper permissions, redirect if no permission\n    if poem.permission == \'Private\':\n        if not db(db.permission.poem_id == poem.id, db.permission.user_id == auth.user.username).select():\n            session.flash = \'You do not have permission to add to this poem\'\n            redirect(URL(\'poem\', args=poem.id))\n\n    # Grab last word in the second to last line to rhyme by default (for ABAB rhyme scheme)\n    rhyme_word = \'\'\n    if poem.line_count == 2:\n        rhyme_word = poem.body.splitlines()[0].split(\' \')[-1]\n    elif poem.line_count == 3:\n        rhyme_word = poem.body.splitlines()[1].split(\' \')[-1]\n    else:\n        rhyme_line = db(db.newline.poem_id == poem.id, db.newline.line_number == poem.line_count-1).select().first()\n        rhyme_word = rhyme_line.line.split(\' \')[-1]\n\n    #Get use the rhymebrain API\n    url = \'http://rhymebrain.com/talk\'\n    data = {}\n    data[\'function\'] = \'getRhymes\'\n    data[\'word\'] = rhyme_word\n    url_values = urllib.urlencode(data)\n    full_url = url + \'?\' + url_values\n    data = urllib2.urlopen(full_url)\n    result = data.read()\n    parsed_json = simplejson.loads(result)\n\n    # Create SQLFORM for the user to add a single line as a String\n    form = SQLFORM(db.newline, fields=[\'line\'], onvalidation=add_validation)\n    form.vars.poem_id = poem.id\n    form.vars.line_number = poem.line_count + 1\n\n    form.process()\n    if form.accepted:\n        poem.update_record(line_count=poem.line_count + 1)\n        redirect(URL(\'poem\', args=poem.id))\n    return locals()\n\ndef add_validation(form):\n    current_line_count = db(db.poem.id == form.vars.poem_id).select().first().line_count\n    if current_line_count != form.vars.line_number + 1:\n        form.errors = True\n        redirect(URL(\'add\', args=poem.id))\n\n@auth.requires_login()\ndef profile():\n    user = auth.user\n    poem = db.poem\n    poems_owned = db(db.poem.author == user.id).select()\n    poems_contributed = db(db.newline.author == user.id, db.poem.id == db.newline.poem_id).select(groupby=db.poem.id)\n    return locals()\n\nresponse._vars=response._caller(add)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Jason\\Downloads\\web2py\\applications\\P2P\\controllers/default.py", line 178, in <module>\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\tools.py", line 4236, in f\n    return action(*a, **b)\n  File "C:\\Users\\Jason\\Downloads\\web2py\\applications\\P2P\\controllers/default.py", line 128, in add\n    if not db(db.permission.poem_id == poem.id, db.permission.user_id == auth.user.username).select():\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\packages\\dal\\pydal\\base.py", line 939, in __call__\n    return self.where(query, ignore_common_filters)\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\packages\\dal\\pydal\\base.py", line 950, in where\n    return Set(self, query, ignore_common_filters=ignore_common_filters)\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 1866, in __init__\n    use_common_filters(query) == ignore_common_filters:\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 1763, in __eq__\n    return repr(self) == repr(other)\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 1742, in __repr__\n    return \'<Query %s>\' % BaseAdapter.expand(self.db._adapter,self)\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1439, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'testtest\'\n'
p11
s.