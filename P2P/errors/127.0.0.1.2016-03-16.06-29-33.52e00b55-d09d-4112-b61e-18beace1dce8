(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 're' is not defined"
p3
sS'layer'
p4
S'C:\\Users\\Jason\\Downloads\\web2py\\applications\\P2P\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nimport datetime\n\ndef index():\n    return locals()\n\ndef user():\n    if request.args(0) == \'profile\':\n        redirect(URL(\'profile\'))\n    return dict(form=auth())\n\ndef browse():\n    import math\n\n    # Auto redirect to page 0 of table\n    if request.args(0) == None:\n        redirect(URL(\'browse\',args = 0))\n\n    # Calculate total number of pages\n    row = db(db.poem).select()\n    row_len = float(len(row))\n    page_num = int(math.ceil(row_len / 15))\n    if len(request.args):\n        page = int(request.args[0])\n    else:\n        page = 0\n\n    # Items displayed per page\n    items_per_page = 15\n\n    limitby = (page*items_per_page,(page+1)*items_per_page+1)\n    rows=db().select(db.poem.ALL,limitby=limitby)\n    return locals()\n\ndef search():\n    rows = db(db.poem).select()\n    searchKey = ""\n    searchType = \'Poems\'\n\n    # Search form\n    form = FORM(\'Search: \',\n              INPUT(_name=\'search\'),\n              \'    Search By:  \',\n              INPUT(_type =\'radio\', _name = \'searchType\', _value = \'Poems\', _checked="checked"), \'  Poems \',\n              INPUT(_type =\'radio\', _name = \'searchType\', _value = \'Authors\'),\'  Authors  \',\n              INPUT(_type=\'submit\'))\n    if form.accepts(request,session):\n        searchKey = form.vars.search\n        searchType = form.vars.searchType\n\n    return locals()\n@auth.requires_login()\ndef poem():\n    # Redirect to poem browser if no argument for poem id\n    if not request.args(0): redirect(URL(\'browse\'))\n\n    # Load poem using the URL argument as poem id\n    poem = db.poem(request.args(0,cast=int))\n    rating = db(db.rating.poem_id == poem.id).select()\n    # Displaying ABAB\n    if (poem.category == \'16 line ABAB rhyme\') or (poem.category == \'16 line AABB rhyme\') or (poem.category == \'Sonnet\') or (poem.category == \'Limerick\') or (poem.category == \'AAAA\'):\n        abab = db(db.abab.poem_id == poem.id).select().first()\n        lines = db(db.new_line.poem_id == poem.id).select(orderby=db.new_line.line_number)\n        contributors = db(db.new_line.poem_id == poem.id).select(db.new_line.author, groupby=db.new_line.author)\n    # Displaying Haiku\n    elif (poem.category == \'Haiku\') or (poem.category == \'10 line Syllabic Verse\') :\n        haiku = db(db.haiku.poem_id == poem.id).select().first()\n        words = db(db.new_word.poem_id == poem.id).select(orderby=db.new_word.word_number)\n        contributors = db(db.new_word.poem_id == poem.id).select(db.new_word.author, groupby=db.new_word.author)\n    elif poem.category == \'Acrostic\':\n        acrostic = db(db.acrostic.poem_id == poem.id).select().first()\n        lines = db(db.new_line.poem_id == poem.id).select(orderby=db.new_line.line_number)\n        contributors = db(db.new_line.poem_id == poem.id).select(db.new_line.author, groupby=db.new_line.author)\n\n    # Form for adding contributors for a private poem\n    forms = FORM(\'Username: \',\n              INPUT(_name=\'username\'),\n              INPUT(_type=\'submit\'))\n    if forms.accepts(request,session):\n        added = False\n        for users in db(db.auth_user).select():\n            if(users.username == forms.vars.username):\n                for permission in db(db.permission).select():\n                    if(permission.user_id == users.id and permission.poem_id == poem.id):\n                        response.flash = \'Already Added\'\n                    else:\n                        added = True\n                if(added == True):\n                    db.permission.insert(user_id = users.id , poem_id = poem.id)\n                    response.flash = \'Added\'\n    return locals()\n\n@auth.requires_login()\ndef delete_poem():\n    poem_id = request.args(0,cast=int)\n    poem = db.poem(poem_id)\n    # Check if user is author of this poem\n    if(poem.author == auth.user.id):\n        poem.delete_record()\n    redirect(URL(\'browse\',args = 0))\n    return locals()\n\ndef count_syllables(str):\n    import urllib\n    import urllib2\n    from gluon.contrib import simplejson\n\n    # GET JSONP from RhymeBrain API and parse\n    url = \'http://rhymebrain.com/talk\'\n    data = {}\n    data[\'function\'] = \'getWordInfo\'\n    data[\'word\'] = str\n    url_values = urllib.urlencode(data)\n    full_url = url + \'?\' + url_values\n    data = urllib2.urlopen(full_url)\n    result = data.read()\n    parsed_json = simplejson.loads(result)\n\n    # Return number of syllables cast as int\n    return int(parsed_json[\'syllables\'])\n\ndef upVoteFunny():\n    poem = db.poem(request.args(0,cast=int))\n    db.rating.insert(poem_id = poem.id, voteFunny = 1)\n    redirect(URL(\'poem\',args = [request.args(0)]))\n    return locals()\n\ndef unVoteFunny():\n    poem = db.poem(request.args(0,cast=int))\n    db((db.rating.author == auth.user) and (db.rating.poem_id == poem.id) and (db.rating.voteFunny == 1)).delete()\n    redirect(URL(\'poem\',args = [request.args(0)]))\n    return locals()\n\ndef upVoteInteresting():\n    poem = db.poem(request.args(0,cast=int))\n    db.rating.insert(poem_id = poem.id, voteInteresting = 1)\n    redirect(URL(\'poem\',args = [request.args(0)]))\n    return locals()\n\ndef unVoteInteresting():\n    poem = db.poem(request.args(0,cast=int))\n    db((db.rating.author == auth.user) and (db.rating.poem_id == poem.id) and (db.rating.voteInteresting == 1)).delete()\n    redirect(URL(\'poem\',args = [request.args(0)]))\n    return locals()\n\ndef upVoteCool():\n    poem = db.poem(request.args(0,cast=int))\n    db.rating.insert(poem_id = poem.id, voteCool = 1)\n    redirect(URL(\'poem\',args = [request.args(0)]))\n    return locals()\n\ndef unVoteCool():\n    poem = db.poem(request.args(0,cast=int))\n    db((db.rating.author == auth.user) and (db.rating.poem_id == poem.id) and (db.rating.voteCool == 1)).delete()\n    redirect(URL(\'poem\',args = [request.args(0)]))\n    return locals()\n\n@auth.requires_login()\ndef create():\n    # Redirect to poem browser if no argument for poem type\n    if not request.args(0): redirect(URL(\'browse\'))\n\n    # Create form for 16 line ABAB rhyme\n    if (request.args(0) == \'abab\') or (request.args(0) == \'aabb\') or (request.args(0) == \'sonnet\') or (request.args(0) == \'limerick\') or (request.args(0) == \'aaaa\'):\n        form = SQLFORM.factory(db.poem, db.abab, fields=[\'title\', \'description\', \'body\', \'permission\']).process()\n        if request.args(0) == \'aabb\': form.vars.category = \'16 line AABB rhyme\'\n        elif request.args(0) == \'sonnet\': form.vars.category = \'Sonnet\'\n        elif request.args(0) == \'limerick\': form.vars.category = \'Limerick\'\n        elif request.args(0) == \'aaaa\' : form.vars.category = \'AAAA\'\n        if form.accepted:\n            # Do an insert if ABAB\n            id = db.poem.insert(**db.poem._filter_fields(form.vars))\n            db.abab.insert(poem_id = db.poem(id), body = form.vars.body)\n            # Create new mutex for this poem\n            db.mutex.insert(poem_id = id, editing = False, edit_timestamp = request.now, ping_timestamp = request.now)\n            # Create a new insert into permission table if poem was created Private (give owner permission)\n            if form.vars.permission == \'Private\':\n                db.permission.insert(user_id = auth.user, poem_id = id)\n            redirect(URL(\'poem\', args=id))\n    # Create form for haiku\n    elif (request.args(0) == \'haiku\') or (request.args(0) == \'syllabic\'):\n        if request.args(0) == \'haiku\':\n            form = SQLFORM.factory(db.poem, db.haiku, fields=[\'title\', \'description\', \'start_haiku\', \'permission\'],labels = {\'start_haiku\':\'Starting Words\'}).process(onvalidation = create_haiku_check)\n            form.vars.category = \'Haiku\'\n        elif request.args(0) == \'syllabic\':\n            form = SQLFORM.factory(db.poem, db.haiku, fields=[\'title\', \'description\', \'start_haiku\', \'permission\'],labels = {\'start_haiku\':\'Starting Word\'}).process(onvalidation = create_syllabic_check)\n            form.vars.category = \'10 line Syllabic Verse\'\n        if form.accepted:\n            word_list = str(form.vars.start_haiku).split(\' \')\n            word_count = len(word_list)\n            syllable_count = 0\n            for word in word_list:\n                syllable_count += count_syllables(word)\n\n            id = db.poem.insert(**db.poem._filter_fields(form.vars))\n            db.haiku.insert(poem_id = id, start_haiku = form.vars.start_haiku, word_count = word_count, syllable_count = syllable_count, body_syllable_count = syllable_count)\n\n            # Create new mutex for this poem\n            db.mutex.insert(poem_id = id, editing = False, edit_timestamp = request.now, ping_timestamp = request.now)\n\n            # Create a new insert into permission table if poem was created Private (give owner permission)\n            if form.vars.permission == \'Private\':\n                db.permission.insert(user_id = auth.user, poem_id = form.vars.id)\n            redirect(URL(\'poem\', args=id))\n    elif request.args(0) == \'acrostic\':\n        form = SQLFORM.factory(db.poem, db.acrostic, fields=[\'title\', \'description\', \'word\', \'permission\']).process()\n        form.vars.category = \'Acrostic\'\n        if form.accepted:\n            # Do an insert if Acrostic\n            id = db.poem.insert(**db.poem._filter_fields(form.vars))\n            db.acrostic.insert(poem_id = db.poem(id), word = form.vars.word)\n\n            # Create new mutex for this poem\n            db.mutex.insert(poem_id = id, editing = False, edit_timestamp = request.now, ping_timestamp = request.now)\n            # Create a new insert into permission table if poem was created Private (give owner permission)\n            if form.vars.permission == \'Private\':\n                db.permission.insert(user_id = auth.user, poem_id = id)\n            redirect(URL(\'poem\', args=id))\n    else:\n        redirect(URL(\'browse\'))\n    return locals()\n\ndef create_haiku_check(form):\n    # Check that user only uses english letters\n    REGEX = re.compile(\'^[A-Za-z ]+$\')\n    match = REGEX.match(form.vars.start_haiku)\n    if not match:\n        form.errors.start_haiku = \'Please enter words totaling up to 5 syllables using only english alphabet and spaces\'\n\n    # Split line into words\n    word_list = str(form.vars.start_haiku).split(\' \')\n\n    # Count syllables\n    syllable_count = 0\n    for word in word_list:\n        syllable_count += count_syllables(word)\n        if syllable_count > 5:\n            form.errors.start_haiku = \'Too many Syllables (5 Max)\'\n\ndef create_syllabic_check (form):\n    # Check that user only uses english letters\n    REGEX = re.compile(\'^[A-Za-z]+$\')\n    match = REGEX.match(form.vars.start_haiku)\n    if not match:\n        form.errors.start_haiku = \'Please enter a single syllable word using only english alphabet\'\n\n    # Split line into words\n    word_list = str(form.vars.start_haiku).split(\' \')\n\n    # Count syllables\n    syllable_count = 0\n    for word in word_list:\n        syllable_count += count_syllables(word)\n        if syllable_count > 1:\n            form.errors.start_haiku = \'Too many Syllables (1 Max)\'\n\n# See below for info about edit\ndef edit():\n    redirect(URL(\'index\'))\n\n"""\n# edit() deprecated, replaced with poem owners just being allowed to add permissions to edit if private, and also\n# poem owners can delete their own poems entirely\n\n@auth.requires_login()\ndef edit():\n    # Redirect to poem browser if no argument for poem id\n    if not request.args(0): redirect(URL(\'browse\'))\n\n    # Load poem using the URL argument as poem id\n    poem_id = request.args(0,cast=int)\n    poem = db.poem(poem_id)\n\n    # Displaying ABAB\n    if (poem.category == \'16 line ABAB rhyme\') or (poem.category == \'16 line AABB rhyme\') or (poem.category == \'Sonnet\'):\n        abab = db(db.abab.poem_id == poem.id).select().first()\n        lines = db(db.new_line.poem_id == poem.id).select(orderby=db.new_line.line_number)\n        contributors = db(db.new_line.poem_id == poem.id).select(db.new_line.author, groupby=db.new_line.author)\n    # Displaying Haiku\n    elif poem.category == \'Haiku\':\n        haiku = db(db.haiku.poem_id == poem.id).select().first()\n        words = db(db.new_word.poem_id == poem.id).select(orderby=db.new_word.word_number)\n        contributors = db(db.new_word.poem_id == poem.id).select(db.new_word.author, groupby=db.new_word.author)\n\n    # Redirect if current user is not owner of poem\n    if poem.author != auth.user.id:\n        session.flash = \'You are not the owner of this poem and cannot edit it\'\n        redirect(URL(\'poem\',args=poem.id))\n\n    # Create SQLFORM\n    form = SQLFORM(db.poem, record=poem, fields=[\'title\',\'description\']).process()\n    if (poem.category == \'16 line ABAB rhyme\') or (poem.category == \'16 line AABB rhyme\') or (poem.category == \'Sonnet\') or (poem.category == \'Limerick\') or (poem.category == \'aaaa\'):\n        lines = db(db.new_line.poem_id == poem_id).select(orderby=db.new_line.line_number)\n        lines_form = []\n        line_form = []\n        for line in lines:\n            delete_form = FORM(INPUT(_name="line_id", _type=\'hidden\',value=line.id), INPUT(_type=\'submit\', _value = \'Delete\')).process(onvalidation=delete_line)\n            delete_form.vars.line = line.line\n            lines_form.append(delete_form)\n            print line.id\n            line_form.append(line.line)\n    elif poem.category == \'Haiku\':\n        word = db(db.new_word.poem_id == poem_id).select(orderby=db.new_word.word_number)\n        words_form = []\n        word_form = []\n        for word in words:\n            delete_word_form = FORM(INPUT(_name="word_id", _type=\'hidden\',value=word.id), INPUT(_type=\'submit\', _value = \'Delete\')).process(onvalidation=delete_word, next=URL(\'edit\', args=poem.id))\n            delete_word_form.vars.word = word.word\n            words_form.append(delete_word_form)\n            word_form.append(word.word)\n\n    if form.accepted:\n        redirect(URL(\'browse\'))\n\n    forms = FORM(\'Username: \',\n              INPUT(_name=\'username\'),\n              INPUT(_type=\'submit\'))\n    if forms.accepts(request,session):\n        added = False\n        for users in db(db.auth_user).select():\n            if(users.username == forms.vars.username):\n                for permission in db(db.permission).select():\n                    if(permission.user_id == users.id and permission.poem_id == poem.id):\n                        response.flash = \'Already Added\'\n                    else:\n                        added = True\n                if(added == True):\n                    db.permission.insert(user_id = users.id , poem_id = poem.id)\n                    response.flash = \'Added\'\n    return locals()\n"""\n\ndef delete_line(form):\n    print \'deleting\' + form.vars.line_id\n    row = db(db.new_line.id == form.vars.line_id).select().first()\n    row.update_record(line = \'\')\n\ndef delete_word(form):\n    print form.vars.word_id\n    word = db(db.new_word.id == form.vars.word_id).select().first()\n    word.update_record(word = \'\')\n\n@auth.requires_login()\ndef add_check():\n    # Redirect to poem browser if no argument for poem id\n    if not request.args(0): redirect(URL(\'browse\'))\n    poem_id = request.args(0,cast=int)\n    poem = db.poem(poem_id)\n    mutex = db(db.mutex.poem_id == poem_id).select().first()\n\n    # Check if poem is private and if current user has proper permissions, redirect if no permission\n    if poem.permission == \'Private\':\n        print \'private\'\n        print db(db.permission.poem_id == poem.id).select().first().user_id\n        print auth.user.id\n        if not db((db.permission.poem_id == poem.id) & (db.permission.user_id == auth.user_id)).select():\n            session.flash = \'You do not have permission to add to this poem\'\n            redirect(URL(\'poem\', args=poem.id))\n\n    # Check and redirect if another user is currently trying to add a line for this poem\n    if mutex.editing:\n        edit_timestamp = mutex.edit_timestamp\n        minutes_elapsed = (datetime.datetime.now() - edit_timestamp).total_seconds() / 60\n        if minutes_elapsed < 5.0:\n            ping_timestamp = mutex.ping_timestamp\n            seconds_elapsed = (datetime.datetime.now() - ping_timestamp).total_seconds()\n            if seconds_elapsed <= 30.0:\n                session.flash = \'A user is currently adding a line!\'\n                redirect(URL(\'poem\', args=poem_id))\n\n    # Lock mutex and allow user to add to that poem with a session variable\n    mutex.update_record(editing = True, edit_timestamp = request.now, ping_timestamp = request.now)\n    db.auth_user(auth.user.id).update_record(allow_add = 2)\n    redirect(URL(\'add\', args=poem_id, user_signature=True))\n\ndef add_ping():\n    if request.vars.poem_id:\n        poem_id = request.vars.poem_id\n        mutex = db(db.mutex.poem_id == poem_id).select().first()\n        mutex.update_record(ping_timestamp = request.now)\n\ndef unlocked_mutex():\n    # Unlock a mutex using argument as poem id\n    if not request.args(0): redirect(URL(\'browse\'))\n    poem_id = request.args(0,cast=int)\n    mutex = db(db.mutex.poem_id == poem_id).select().first()\n\n@auth.requires_login()\ndef add():\n    import urllib\n    import urllib2\n    from gluon.contrib import simplejson\n\n    # Redirect to poem browser if no argument for poem id\n    if not request.args(0):\n        redirect(URL(\'browse\'))\n\n    # Check that allow_add is valid for this user, meaning they passed add_check() validation\n    poem_id = request.args(0,cast=int)\n    allow_add = db.auth_user(auth.user.id).allow_add\n    if allow_add > 0:\n        allow_add -= 1\n        db.auth_user(auth.user.id).update_record(allow_add = allow_add)\n    else:\n        redirect(URL(\'browse\'))\n\n    # Load poem using the URL argument as poem id\n    poem = db.poem(request.args(0,cast=int))\n\n    # Add form for ABAB\n    if (poem.category == \'16 line ABAB rhyme\') or (poem.category == \'16 line AABB rhyme\') or (poem.category == \'Sonnet\') or (poem.category == \'Limerick\') or (poem.category == \'AAAA\'):\n        abab = db(db.abab.poem_id == poem.id).select().first()\n        lines = db(db.new_line.poem_id == poem.id).select(orderby=db.new_line.line_number)\n        if (poem.category == \'16 line ABAB rhyme\') or ((poem.category == \'Sonnet\') and (abab.line_count < 12)):\n        # Grab last word in the second to last line to rhyme by default (for ABAB rhyme scheme)\n            rhyme_word = \'\'\n            if abab.line_count == 2:\n                rhyme_word = abab.body.splitlines()[0].split(\' \')[-1]\n            elif abab.line_count == 3:\n                rhyme_word = abab.body.splitlines()[1].split(\' \')[-1]\n            else:\n                rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == abab.line_count-1)).select().first()\n                rhyme_word = rhyme_line.line.split(\' \')[-1]\n        elif (poem.category == \'Sonnet\') and (abab.line_count > 11):\n            rhyme_word = \'\'\n            rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == abab.line_count)).select().first()\n            rhyme_word = rhyme_line.line.split(\' \')[-1]\n        elif (poem.category == \'16 line AABB rhyme\') or ((poem.category == \'Limerick\') and (abab.line_count+1 < 5)):\n            rhyme_word = \'\'\n            if abab.line_count == 2:\n                rhyme_word = \'\'\n            else:\n                rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == abab.line_count)).select().first()\n                rhyme_word = rhyme_line.line.split(\' \')[-1]\n        elif (poem.category == \'Limerick\') and (abab.line_count+1 > 4):\n            rhyme_word = \'\'\n            rhyme_word = abab.body.splitlines()[0].split(\' \')[-1]\n        elif poem.category == \'AAAA\':\n            rhyme_word = \'\'\n            if abab.line_count == 2:\n                rhyme_word = abab.body.splitlines()[1].split(\' \')[-1]\n            else:\n                rhyme_word = \'\'\n                rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == abab.line_count)).select().first()\n                rhyme_word = rhyme_line.line.split(\' \')[-1]\n        #Get use the rhymebrain API\n        url = \'http://rhymebrain.com/talk\'\n        data = {}\n        data[\'function\'] = \'getRhymes\'\n        data[\'word\'] = rhyme_word\n        url_values = urllib.urlencode(data)\n        full_url = url + \'?\' + url_values\n        data = urllib2.urlopen(full_url)\n        result = data.read()\n        parsed_json = simplejson.loads(result)\n\n        sorted_syllables = [[] for x in range(11)]\n        for entry in parsed_json:\n            syllable_count = int(entry[\'syllables\'])\n            word = str(entry[\'word\'].encode(\'utf-8\',"ignore"))\n            sorted_syllables[syllable_count].append(word)\n\n        # Create SQLFORM for the user to add a single line as a String\n        form = SQLFORM(db.new_line, fields=[\'line\'])\n        form.vars.poem_id = poem.id\n        form.vars.line_number = abab.line_count + 1\n\n        form.process()\n        if form.accepted:\n            abab.update_record(line_count = abab.line_count + 1)\n            mutex = db(db.mutex.poem_id == poem.id).select().first()\n            mutex.update_record(editing = False)\n            redirect(URL(\'poem\', args=poem.id))\n        elif form.errors:\n            allow_add = db.auth_user(auth.user.id).allow_add + 1\n            db.auth_user(auth.user.id).update_record(allow_add = allow_add)\n    # Add form for Acrostic\n    elif (poem.category == \'Acrostic\'):\n        acrostic = db(db.acrostic.poem_id == poem.id).select().first()\n        lines = db(db.new_line.poem_id == poem.id).select(orderby=db.new_line.line_number)\n        # Create SQLFORM for the user to add a single line as a String\n        form = SQLFORM(db.new_line, fields=[\'line\'])\n        form.vars.poem_id = poem.id\n        form.vars.line_number = acrostic.line_count + 1\n\n        form.process(onvalidation = add_acrostic_check)\n        if form.accepted:\n            acrostic.update_record(line_count = acrostic.line_count + 1)\n            mutex = db(db.mutex.poem_id == poem.id).select().first()\n            mutex.update_record(editing = False)\n            redirect(URL(\'poem\', args=poem.id))\n        elif form.errors:\n            allow_add = db.auth_user(auth.user.id).allow_add + 1\n            db.auth_user(auth.user.id).update_record(allow_add = allow_add)\n    # Add form for Haiku\n    elif(poem.category == \'Haiku\') or (poem.category == \'10 line Syllabic Verse\'):\n        haiku = db(db.haiku.poem_id == poem.id).select().first()\n        words = db(db.new_word.poem_id == poem.id).select(orderby=db.new_word.word_number)\n        form = SQLFORM(db.new_word, fields=[\'word\'])\n        form.vars.poem_id = poem.id\n        form.vars.word_number = haiku.word_count + 1\n        syllables_left = 0\n        if poem.category == \'Haiku\':\n            if haiku.syllable_count < 5:\n                form.vars.line_count = 1\n                syllables_left = 5 - haiku.syllable_count\n            elif 5 <= haiku.syllable_count <=11:\n                form.vars.line_count = 2\n                syllables_left = 12 - haiku.syllable_count\n            elif 11 < haiku.syllable_count:\n                form.vars.line_count = 3\n                syllables_left = 17 - haiku.syllable_count\n            form.process(onvalidation = add_haiku_check)\n        elif poem.category == \'10 line Syllabic Verse\':\n            if haiku.syllable_count < 3:\n                form.vars.line_count = 2\n                syllables_left = 3 - haiku.syllable_count\n            elif 3 <= haiku.syllable_count <=5:\n                form.vars.line_count = 3\n                syllables_left = 6 - haiku.syllable_count\n            elif 5 < haiku.syllable_count <= 9:\n                form.vars.line_count = 4\n                syllables_left = 10 - haiku.syllable_count\n            elif 9 < haiku.syllable_count <= 14:\n                form.vars.line_count = 5\n                syllables_left = 15 - haiku.syllable_count\n            elif 14 < haiku.syllable_count <= 20:\n                form.vars.line_count = 6\n                syllables_left = 21 - haiku.syllable_count\n            elif 20 < haiku.syllable_count <= 27:\n                form.vars.line_count = 7\n                syllables_left = 28 - haiku.syllable_count\n            elif 27 < haiku.syllable_count <= 35:\n                form.vars.line_count = 8\n                syllables_left = 36 - haiku.syllable_count\n            elif 35 < haiku.syllable_count <= 44:\n                form.vars.line_count = 9\n                syllables_left = 45 - haiku.syllable_count\n            elif 44 < haiku.syllable_count:\n                form.vars.line_count = 10\n                syllables_left = 55 - haiku.syllable_count\n            form.process(onvalidation = add_syllabic_check)\n\n        if form.accepted:\n            syllable_count = count_syllables(form.vars.word)\n            db.new_word(form.vars.id).update_record(syllables = syllable_count)\n            haiku.update_record(word_count = haiku.word_count + 1, syllable_count = haiku.syllable_count + syllable_count)\n            mutex = db(db.mutex.poem_id == poem.id).select().first()\n            mutex.update_record(editing=False)\n            redirect(URL(\'poem\', args=poem.id))\n        elif form.errors:\n            allow_add = db.auth_user(auth.user.id).allow_add + 1\n            db.auth_user(auth.user.id).update_record(allow_add = allow_add)\n\n    return locals()\n\ndef add_haiku_check(form):\n    haiku = db(db.haiku.poem_id == form.vars.poem_id).select().first()\n\n    # Calculate how many syllables left in current line for haiku\n    syllables_left = 0\n    if haiku.syllable_count < 5:\n        syllables_left = 5 - haiku.syllable_count\n    elif 5 <= haiku.syllable_count <=11:\n        syllables_left = 12 - haiku.syllable_count\n    elif 11 < haiku.syllable_count:\n        syllables_left = 17 - haiku.syllable_count\n\n    # Error if word that user input has too many syllables\n    if count_syllables(form.vars.word) > syllables_left:\n        form.errors.word = \'Word has too many syllables for this line\'\n\ndef add_syllabic_check(form):\n    haiku = db(db.haiku.poem_id == form.vars.poem_id).select().first()\n\n    # Calculate how many syllables left in current line for syllablic\n    syllables_left = 0\n    if haiku.syllable_count < 3:\n        syllables_left = 3 - haiku.syllable_count\n    elif 3 <= haiku.syllable_count <= 5:\n        syllables_left = 6 - haiku.syllable_count\n    elif 5 < haiku.syllable_count <= 9:\n        syllables_left = 10 - haiku.syllable_count\n    elif 9 < haiku.syllable_count <= 14:\n        syllables_left = 15 - haiku.syllable_count\n    elif 14 < haiku.syllable_count <= 20:\n        syllables_left = 21 - haiku.syllable_count\n    elif 20 < haiku.syllable_count <= 27:\n        syllables_left = 28 - haiku.syllable_count\n    elif 27 < haiku.syllable_count <= 35:\n        syllables_left = 36 - haiku.syllable_count\n    elif 35 < haiku.syllable_count <= 44:\n        syllables_left = 45 - haiku.syllable_count\n    elif 44 < haiku.syllable_count:\n        syllables_left = 55 - haiku.syllable_count\n\n    # Error if word that user input has too many syllables\n    if count_syllables(form.vars.word) > syllables_left:\n        form.errors.word = \'Word has too many syllables for this line\'\n\ndef add_acrostic_check (form):\n    acrostic = db(db.acrostic.poem_id == form.vars.poem_id).select().first()\n    check_acrostic = list(acrostic.word)[acrostic.line_count]\n    if (check_acrostic.lower() != form.vars.line[0][0].lower()):\n        form.errors.line = \'Does not start with the right letter\'\n\ndef specialadd():\n    redirect(URL(\'index\'))\n\n"""\n# specialadd() deprecated along with edit()\n\n@auth.requires_login()\ndef specialadd():\n    import urllib\n    import urllib2\n    from gluon.contrib import simplejson\n\n    # Redirect to poem browser if no argument for poem id\n    if not request.args(0): redirect(URL(\'browse\'))\n    lineNumber = request.args(1,cast = int)\n    # Load poem using the URL argument as poem id\n    poem = db.poem(request.args(0,cast=int))\n    rows = db(db.new_line.poem_id == poem.id).select(orderby=db.new_line.line_number)\n    check = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == request.args(1))).select().first()\n    if check:\n        if not check.line == \'\':\n            redirect(URL(\'browse\'))\n    # Check if poem is private and if current user has proper permissions, redirect if no permission\n    if poem.permission == \'Private\':\n        print \'private\'\n        print db(db.permission.poem_id == poem.id).select().first().user_id\n        print auth.user.id\n        if not db((db.permission.poem_id == poem.id) & (db.permission.user_id == auth.user_id)).select():\n            session.flash = \'You do not have permission to add to this poem\'\n            redirect(URL(\'poem\', args=poem.id))\n\n    # Add form for ABAB\n    if (poem.category == \'16 line ABAB rhyme\') or (poem.category == \'16 line AABB rhyme\') or (poem.category == \'Sonnet\') or (poem.category == \'Limerick\') or (poem.category == \'AAAA\'):\n        abab = db(db.abab.poem_id == poem.id).select().first()\n        lines = db(db.new_line.poem_id == poem.id).select(orderby=db.new_line.line_number)\n        if poem.category == \'16 line ABAB rhyme\':\n            # Grab last word in the second to last line to rhyme by default (for ABAB rhyme scheme)\n            rhyme_word = \'\'\n            rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == lineNumber+2)).select().first()\n            test = False\n            if lineNumber-1 == 2:\n                rhyme_word = abab.body.splitlines()[0].split(\' \')[-1]\n            elif lineNumber-1 == 3:\n                rhyme_word = abab.body.splitlines()[1].split(\' \')[-1]\n            elif rhyme_line:\n                rhyme_word = rhyme_line.line.split(\' \')[-1]\n                test = True\n            else:\n                rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == lineNumber-2)).select().first()\n                rhyme_word = rhyme_line.line.split(\' \')[-1]\n\n        elif poem.category == \'16 line AABB rhyme\':\n            # Grab last word in the second to last line to rhyme by default (for ABAB rhyme scheme)\n            rhyme_word = \'\'\n            rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == lineNumber+1)).select().first()\n            test = False\n            if (lineNumber % 4 == 0) or (lineNumber % 4 == 2):\n                rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == lineNumber-1)).select().first()\n                rhyme_word = rhyme_line.line.split(\' \')[-1]\n            elif rhyme_line:\n                rhyme_word = rhyme_line.line.split(\' \')[-1]\n                test = True\n        elif poem.category == \'Limerick\':\n             # Grab last word in the second to last line to rhyme by default (for ABAB rhyme scheme)\n            rhyme_word = \'\'\n            rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == lineNumber+1)).select().first()\n            test = False\n            if (lineNumber % 4 == 0) or (lineNumber % 4 == 2):\n                rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == lineNumber-1)).select().first()\n                rhyme_word = rhyme_line.line.split(\' \')[-1]\n            elif rhyme_line:\n                rhyme_word = rhyme_line.line.split(\' \')[-1]\n                test = True\n        #Get use the rhymebrain API\n        url = \'http://rhymebrain.com/talk\'\n        data = {}\n        data[\'function\'] = \'getRhymes\'\n        data[\'word\'] = rhyme_word\n        url_values = urllib.urlencode(data)\n        full_url = url + \'?\' + url_values\n        data = urllib2.urlopen(full_url)\n        result = data.read()\n        parsed_json = simplejson.loads(result)\n\n        sorted_syllables = [[] for x in range(11)]\n        for entry in parsed_json:\n            syllable_count = int(entry[\'syllables\'])\n            word = str(entry[\'word\'].encode(\'utf-8\',"ignore"))\n            sorted_syllables[syllable_count].append(word)\n\n        # Create SQLFORM for the user to add a single line as a String\n        form = FORM(INPUT(_name = "line"),\n               INPUT(_type="submit",_value = "Add"))\n        if form.accepts(request,session):\n            response.flash = form.vars.line\n            if rows:\n                update = db((db.new_line.line == \'\') & (db.new_line.line_number == request.args(1))).select().first()\n                update.update_record(line = form.vars.line)\n                update.update_record(author = auth.user.id)\n                redirect(URL(\'poem\', args=poem.id))\n\n    # Add form for Haiku\n    elif poem.category == \'Haiku\':\n        haiku = db(db.haiku.poem_id == poem.id).select().first()\n        words = db(db.new_word.poem_id == poem.id).select(orderby=db.new_word.word_number)\n        # Create SQLFORM for the user to add a single line as a String\n        form = FORM(INPUT(_name = "word"),\n               INPUT(_type="submit",_value = "Add"))\n        if form.accepts(request,session):\n            response.flash = form.vars.word\n            if words:\n                update = db((db.new_word.word == \'\') & (db.new_word.word_number == request.args(1))).select().first()\n                update.update_record(word = form.vars.word)\n                update.update_record(author = auth.user.id)\n                redirect(URL(\'poem\', args=poem.id))\n    return locals()\n"""\n\ndef pick():\n    return locals()\n\n@auth.requires_login()\ndef profile():\n    user = auth.user\n    poem = db.poem\n    poems_owned = db(db.poem.author == user.id).select()\n    poems_contributed = db((db.new_line.author == user.id) & (db.poem.id == db.new_line.poem_id)).select(groupby=db.poem.id)\n    return locals()\n\nresponse._vars=response._caller(create)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.NameError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.NameError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.NameError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.NameError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.NameError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.NameError object>'
p23
sS'__reduce__'
p24
S'<built-in method __reduce__ of exceptions.NameError object>'
p25
sS'__str__'
p26
S"<method-wrapper '__str__' of exceptions.NameError object>"
p27
sS'__format__'
p28
S'<built-in method __format__ of exceptions.NameError object>'
p29
sS'__getattribute__'
p30
S"<method-wrapper '__getattribute__' of exceptions.NameError object>"
p31
sS'__class__'
p32
S"<type 'exceptions.NameError'>"
p33
sS'__unicode__'
p34
S'<built-in method __unicode__ of exceptions.NameError object>'
p35
sS'__delattr__'
p36
S"<method-wrapper '__delattr__' of exceptions.NameError object>"
p37
sS'__subclasshook__'
p38
S'<built-in method __subclasshook__ of type object>'
p39
sS'__repr__'
p40
S"<method-wrapper '__repr__' of exceptions.NameError object>"
p41
sS'args'
p42
S'("global name \'re\' is not defined",)'
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.NameError object>'
p47
sS'__doc__'
p48
S"'Name not found globally.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.NameError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S"global name 're' is not defined"
p55
sS'request'
p56
cgluon.html
XML_unpickle
p57
(S's\xadx\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>P2P</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>haiku</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_admin</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-4c5bfc7c-1d59-43d4-ad21-18065e6c5ead<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_homework_2</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-c8f1cb80-5f6f-4ae9-9820-484893fa04da<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_hw21</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-c6701d6d-3194-4f2b-bd6c-31d002f55f58<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_hw23</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-d06a198c-0768-4330-9065-1ba4b1b2071e<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_p2p</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-031e5f48-62e7-4da5-b2c6-af33f201f4d8<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_welcome</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-43619f45-f674-4e92-b9bc-2aef6fcd71d3<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div>691</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div>multipart/form-data; boundary=----WebKitFormBoundaryHIA9dxFz6PzNW3zA</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_LANGUAGE</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CACHE_CONTROL</td><td style="vertical-align:top;">:</td><td><div>max-age=0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div>691</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div>multipart/form-data; boundary=----WebKitFormBoundaryHIA9dxFz6PzNW3zA</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE</td><td style="vertical-align:top;">:</td><td><div>session_id_hw21=127.0.0.1-c6701d6d-3194-4f2b-bd6c-31d002f55f58; session_id_homework_2=127.0.0.1-c8f1cb80-5f6f-4ae9-9820-484893fa04da; session_id_hw23=127.0.0.1-d06a198c-0768-4330-9065-1ba4b1b2071e; session_id_welcome=127.0.0.1-43619f45-f674-4e92-b9bc-2aef6fcd71d3; session_id_admin=127.0.0.1-4c5bfc7c-1d59-43d4-ad21-18065e6c5ead; session_id_p2p=127.0.0.1-031e5f48-62e7-4da5-b2c6-af33f201f4d8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ORIGIN</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_REFERER</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000/P2P/default/create/haiku</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_UPGRADE_INSECURE_REQUESTS</td><td style="vertical-align:top;">:</td><td><div>1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/P2P/default/create/haiku</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>49505</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>POST</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SCRIPT_NAME</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>Witidek</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_SOFTWARE</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;C:\\\\Users\\\\Jason\\\\Downloads\\\\web2py\\\\applications\\\\welcome\\\\&#x27;, &#x27;C:\\\\Users\\\\Jason\\\\Downloads\\\\web2py\\\\applications\\\\admin\\\\&#x27;, &#x27;C:\\\\Users\\\\Jason\\\\Downloads\\\\web2py\\\\applications\\\\P2P\\\\&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Jason\\Downloads\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x34175d0: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [&#x27;fe80::c4d9:80a7:6927:91dc%20&#x27;, &#x27;fe80::ad25:41ef:cc7a:b5f4%16&#x27;, &#x27;fe80::7910:6b7f:64e5:6055%24&#x27;, &#x27;192.168.1.7&#x27;, &#x27;fe80::80aa:bcc3:c776:b57a%23&#x27;, &#x27;192.168.56.1&#x27;, &#x27;192.168.109.1&#x27;, &#x27;192.168.158.1&#x27;], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;scheduler_groups&#x27;: None, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;Witidek&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;print_errors&#x27;: False, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;C:\\\\Users\\\\Jason\\\\Downloads\\\\web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;gae&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_length</td><td style="vertical-align:top;">:</td><td><div>691</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_type</td><td style="vertical-align:top;">:</td><td><div>multipart/form-data; boundary=----WebKitFormBoundaryHIA9dxFz6PzNW3zA</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Jason\\Downloads\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_language</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cache_control</td><td style="vertical-align:top;">:</td><td><div>max-age=0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_length</td><td style="vertical-align:top;">:</td><td><div>691</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_type</td><td style="vertical-align:top;">:</td><td><div>multipart/form-data; boundary=----WebKitFormBoundaryHIA9dxFz6PzNW3zA</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cookie</td><td style="vertical-align:top;">:</td><td><div>session_id_hw21=127.0.0.1-c6701d6d-3194-4f2b-bd6c-31d002f55f58; session_id_homework_2=127.0.0.1-c8f1cb80-5f6f-4ae9-9820-484893fa04da; session_id_hw23=127.0.0.1-d06a198c-0768-4330-9065-1ba4b1b2071e; session_id_welcome=127.0.0.1-43619f45-f674-4e92-b9bc-2aef6fcd71d3; session_id_admin=127.0.0.1-4c5bfc7c-1d59-43d4-ad21-18065e6c5ead; session_id_p2p=127.0.0.1-031e5f48-62e7-4da5-b2c6-af33f201f4d8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_origin</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_referer</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000/P2P/default/create/haiku</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_upgrade_insecure_requests</td><td style="vertical-align:top;">:</td><td><div>1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>fe80::c4d9:80a7:6927:91dc%20</div></td></tr><tr><td><div>fe80::ad25:41ef:cc7a:b5f4%16</div></td></tr><tr><td><div>fe80::7910:6b7f:64e5:6055%24</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>192.168.1.7</div></td></tr><tr><td><div>fe80::80aa:bcc3:c776:b57a%23</div></td></tr><tr><td><div>Witidek</div></td></tr><tr><td><div>192.168.158.1</div></td></tr><tr><td><div>192.168.109.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr><tr><td><div>192.168.56.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/P2P/default/create/haiku</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>49505</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>POST</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/P2P/default/create/haiku</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">script_name</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>Witidek</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_software</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Jason\\Downloads\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.13.4-stable+timestamp.2015.12.26.04.59.39</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x01CF50D0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x027CEDC0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x0A6D9430&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x01CF50D0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x027CEDC0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x0A6D9430&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Jason\\Downloads\\web2py\\applications\\P2P\\</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>create</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;C:\\\\Users\\\\Jason\\\\Downloads\\\\web2py\\\\applications\\\\welcome\\\\&#x27;, &#x27;C:\\\\Users\\\\Jason\\\\Downloads\\\\web2py\\\\applications\\\\admin\\\\&#x27;, &#x27;C:\\\\Users\\\\Jason\\\\Downloads\\\\web2py\\\\applications\\\\P2P\\\\&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Jason\\Downloads\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x34175d0: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [&#x27;fe80::c4d9:80a7:6927:91dc%20&#x27;, &#x27;fe80::ad25:41ef:cc7a:b5f4%16&#x27;, &#x27;fe80::7910:6b7f:64e5:6055%24&#x27;, &#x27;192.168.1.7&#x27;, &#x27;fe80::80aa:bcc3:c776:b57a%23&#x27;, &#x27;192.168.56.1&#x27;, &#x27;192.168.109.1&#x27;, &#x27;192.168.158.1&#x27;], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;scheduler_groups&#x27;: None, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;Witidek&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;print_errors&#x27;: False, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;C:\\\\Users\\\\Jason\\\\Downloads\\\\web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;gae&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Jason\\Downloads\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>fe80::c4d9:80a7:6927:91dc%20</div></td></tr><tr><td><div>fe80::ad25:41ef:cc7a:b5f4%16</div></td></tr><tr><td><div>fe80::7910:6b7f:64e5:6055%24</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>192.168.1.7</div></td></tr><tr><td><div>fe80::80aa:bcc3:c776:b57a%23</div></td></tr><tr><td><div>Witidek</div></td></tr><tr><td><div>192.168.158.1</div></td></tr><tr><td><div>192.168.109.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr><tr><td><div>192.168.56.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.13.4-stable+timestamp.2015.12.26.04.59.39</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_scheduler</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_shell</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 3, 16, 6, 29, 33, 375000)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div>haiku</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/P2P/default/create/haiku</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 3, 16, 13, 29, 33, 375000)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x09E28A70&gt;</div></td></tr></table></div>'
tRp58
sS'frames'
p59
(lp60
(dp61
S'file'
p62
S'C:\\Users\\Jason\\Downloads\\web2py\\gluon\\restricted.py'
p63
sS'dump'
p64
(dp65
S'environment'
p66
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}"
p67
sS'ccode'
p68
S'<code object <module> at 09B56800, file "C:\\User...pplications\\P2P\\controllers/default.py", line 10>'
p69
ssS'lnum'
p70
I227
sS'lines'
p71
(dp72
I224
S'            ccode = code'
p73
sI225
S'        else:'
p74
sI226
S'            ccode = compile2(code, layer)'
p75
sI227
S'        exec ccode in environment'
p76
sI228
S'    except HTTP:'
p77
sI229
S'        raise'
p78
sI230
S'    except RestrictedError:'
p79
sI231
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p80
sI222
S'    try:'
p81
sI223
S'        if isinstance(code, types.CodeType):'
p82
ssS'call'
p83
S"(code='# -*- coding: utf-8 -*-\\n# this file is released ...ocals()\\n\\nresponse._vars=response._caller(create)\\n', environment={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}, layer=r'C:\\Users\\Jason\\Downloads\\web2py\\applications\\P2P\\controllers/default.py')"
p84
sS'func'
p85
S'restricted'
p86
sa(dp87
g62
S'C:\\Users\\Jason\\Downloads\\web2py\\applications\\P2P\\controllers\\default.py'
p88
sg64
(dp89
sg70
I744
sg71
(dp90
I736
S'@auth.requires_login()'
p91
sI737
S'def profile():'
p92
sI738
S'    user = auth.user'
p93
sI739
S'    poem = db.poem'
p94
sI740
S'    poems_owned = db(db.poem.author == user.id).select()'
p95
sI741
S'    poems_contributed = db((db.new_line.author == user.id) & (db.poem.id == db.new_line.poem_id)).select(groupby=db.poem.id)'
p96
sI742
S'    return locals()'
p97
sI733
S'def pick():'
p98
sI734
S'    return locals()'
p99
sI735
S''
ssg83
S'()'
p100
sg85
S'<module>'
p101
sa(dp102
g62
S'C:\\Users\\Jason\\Downloads\\web2py\\gluon\\globals.py'
p103
sg64
(dp104
S'self'
p105
S'undefined'
p106
sS'f'
S'<function create>'
p107
ssg70
I412
sg71
(dp108
I416
S"        self.generic_patterns = ['*']"
p109
sI407
S"        self.flash = ''            # used by the default view layout"
p110
sI408
S'        self.meta = Storage()      # used by web2py_ajax.html'
p111
sI409
S'        self.menu = []             # used by the default view layout'
p112
sI410
S'        self.files = []            # used by web2py_ajax.html'
p113
sI411
S'        self._vars = None'
p114
sI412
S'        self._caller = lambda f: f()'
p115
sI413
S'        self._view_environment = None'
p116
sI414
S'        self._custom_commit = None'
p117
sI415
S'        self._custom_rollback = None'
p118
ssg83
S'(f=<function create>)'
p119
sg85
S'<lambda>'
p120
sa(dp121
g62
S'C:\\Users\\Jason\\Downloads\\web2py\\gluon\\tools.py'
p122
sg64
(dp123
S'action'
p124
S'<function create>'
p125
sS'a'
S'()'
p126
sS'b'
g45
ssg70
I4236
sg71
(dp127
I4231
S'                    flag = condition'
p128
sI4232
S'                if not flag:'
p129
sI4233
S'                    current.session.flash = self.messages.access_denied'
p130
sI4234
S'                    return call_or_redirect('
p131
sI4235
S'                        self.settings.on_failed_authorization)'
p132
sI4236
S'                return action(*a, **b)'
p133
sI4237
S'            f.__doc__ = action.__doc__'
p134
sI4238
S'            f.__name__ = action.__name__'
p135
sI4239
S'            f.__dict__.update(action.__dict__)'
p136
sI4240
S'            return f'
p137
ssg83
S'(*a=(), **b={})'
p138
sg85
S'f'
sa(dp139
g62
S'C:\\Users\\Jason\\Downloads\\web2py\\applications\\P2P\\controllers\\default.py'
p140
sg64
(dp141
S'onvalidation'
p142
g106
sS'form'
p143
g106
sS'global SQLFORM'
p144
S"<class 'gluon.sqlhtml.SQLFORM'>"
p145
sS'labels'
p146
g106
sS'global create_haiku_check'
p147
S'<function create_haiku_check>'
p148
sS'SQLFORM.factory'
p149
S'<function factory>'
p150
sS'db.poem'
p151
S'<Table poem (id,title,author,description,date_posted,category,permission)>'
p152
sS'fields'
p153
g106
sS'global db'
p154
S'<DAL uri="sqlite://storage.sqlite">'
p155
sS'db.haiku'
p156
S'<Table haiku (id,poem_id,start_haiku,word_count,syllable_count,body_syllable_count,line_count)>'
p157
ssg70
I191
sg71
(dp158
I192
S"            form.vars.category = 'Haiku'"
p159
sI193
S"        elif request.args(0) == 'syllabic':"
p160
sI194
S"            form = SQLFORM.factory(db.poem, db.haiku, fields=['title', 'description', 'start_haiku', 'permission'],labels = {'start_haiku':'Starting Word'}).process(onvalidation = create_syllabic_check)"
p161
sI195
S"            form.vars.category = '10 line Syllabic Verse'"
p162
sI186
S'                db.permission.insert(user_id = auth.user, poem_id = id)'
p163
sI187
S"            redirect(URL('poem', args=id))"
p164
sI188
S'    # Create form for haiku'
p165
sI189
S"    elif (request.args(0) == 'haiku') or (request.args(0) == 'syllabic'):"
p166
sI190
S"        if request.args(0) == 'haiku':"
p167
sI191
S"            form = SQLFORM.factory(db.poem, db.haiku, fields=['title', 'description', 'start_haiku', 'permission'],labels = {'start_haiku':'Starting Words'}).process(onvalidation = create_haiku_check)"
p168
ssg83
S'()'
p169
sg85
S'create'
p170
sa(dp171
g62
S'C:\\Users\\Jason\\Downloads\\web2py\\gluon\\html.py'
p172
sg64
(dp173
S'self'
p174
S'<gluon.sqlhtml.SQLFORM object>'
p175
sS'self.validate'
p176
S'<bound method SQLFORM.validate of <gluon.sqlhtml.SQLFORM object>>'
p177
sS'kwargs'
p178
S"{'dbio': True, 'onvalidation': <function create_haiku_check>}"
p179
ssg70
I2304
sg71
(dp180
I2304
S'        self.validate(**kwargs)'
p181
sI2305
S'        return self'
p182
sI2306
S''
sI2307
S'    REDIRECT_JS = "window.location=\'%s\';return false"'
p183
sI2308
S''
sI2299
S''
sI2300
S''
sI2301
S'        """'
p184
sI2302
S"        kwargs['dbio'] = kwargs.get('dbio', True)"
p185
sI2303
S'                                    # necessary for SQLHTML forms'
p186
ssg83
S"(self=<gluon.sqlhtml.SQLFORM object>, **kwargs={'dbio': True, 'onvalidation': <function create_haiku_check>})"
p187
sg85
S'process'
p188
sa(dp189
g62
S'C:\\Users\\Jason\\Downloads\\web2py\\gluon\\html.py'
p190
sg64
(dp191
S'self'
p192
S'<gluon.sqlhtml.SQLFORM object>'
p193
sS'self.accepts'
p194
S'<bound method SQLFORM.accepts of <gluon.sqlhtml.SQLFORM object>>'
p195
sS'kwargs'
p196
S"{'dbio': True, 'onvalidation': <function create_haiku_check>, 'request_vars': <Storage {'description': 'asdf', 'title': 'adsf'...9-0d8f7437ad6f', '_formname': 'no_table/create'}>, 'session': <Storage {'_auth_next': None, 'flash': None, 'au...gin]': ['9500cb0a-b63e-41da-a396-268f83368d8b']}>}"
p197
ssg70
I2241
sg71
(dp198
I2240
S''
sI2241
S'        if self.accepts(**kwargs):'
p199
sI2242
S"            if onsuccess == 'flash':"
p200
sI2243
S'                if next:'
p201
sI2244
S'                    current.session.flash = message_onsuccess'
p202
sI2245
S'                else:'
p203
sI2236
S"        for key in ('message_onsuccess', 'message_onfailure', 'onsuccess',"
p204
sI2237
S"                    'onfailure', 'next', 'message_onchange', 'onchange'):"
p205
sI2238
S'            if key in kwargs:'
p206
sI2239
S'                del kwargs[key]'
p207
ssg83
S"(self=<gluon.sqlhtml.SQLFORM object>, **kwargs={'dbio': True, 'onvalidation': <function create_haiku_check>, 'request_vars': <Storage {'description': 'asdf', 'title': 'adsf'...9-0d8f7437ad6f', '_formname': 'no_table/create'}>, 'session': <Storage {'_auth_next': None, 'flash': None, 'au...gin]': ['9500cb0a-b63e-41da-a396-268f83368d8b']}>})"
p208
sg85
S'validate'
p209
sa(dp210
g62
S'C:\\Users\\Jason\\Downloads\\web2py\\gluon\\sqlhtml.py'
p211
sg64
(dp212
S'kwargs'
p213
g45
ssg70
I1505
sg71
(dp214
I1504
S'            hideerror=hideerror,'
p215
sI1505
S'            **kwargs'
p216
sI1506
S'        )'
p217
sI1507
S''
sI1508
S'        self.deleted = \\'
p218
sI1509
S'            request_vars.get(self.FIELDNAME_REQUEST_DELETE, False)'
p219
sI1500
S'            session,'
p220
sI1501
S'            formname,'
p221
sI1502
S'            keepvalues,'
p222
sI1503
S'            onvalidation,'
p223
ssg83
S"(self=<gluon.sqlhtml.SQLFORM object>, request_vars=<Storage {'description': 'asdf', 'title': 'adsf'...9-0d8f7437ad6f', '_formname': 'no_table/create'}>, session=<Storage {'_auth_next': None, 'flash': None, 'au...gin]': ['9500cb0a-b63e-41da-a396-268f83368d8b']}>, formname='no_table/create', keepvalues=False, onvalidation=<function create_haiku_check>, dbio=True, hideerror=False, detect_record_change=False, **kwargs={})"
p224
sg85
S'accepts'
p225
sa(dp226
g62
S'C:\\Users\\Jason\\Downloads\\web2py\\gluon\\html.py'
p227
sg64
(dp228
S'global call_as_list'
p229
S'<function call_as_list>'
p230
sS'self'
p231
S'<gluon.sqlhtml.SQLFORM object>'
p232
sS'onvalidation'
p233
S'<function create_haiku_check>'
p234
ssg70
I2142
sg71
(dp235
I2144
S'            status = False'
p236
sI2145
S'        if not session is None:'
p237
sI2146
S"            if hasattr(self, 'record_hash'):"
p238
sI2137
S'                if changed:'
p239
sI2138
S'                    if onchange and self.record_changed and \\'
p240
sI2139
S'                            self.detect_record_change:'
p241
sI2140
S'                        call_as_list(onchange, self)'
p242
sI2141
S'            elif status:'
p243
sI2142
S'                call_as_list(onvalidation, self)'
p244
sI2143
S'        if self.errors:'
p245
ssg83
S"(self=<gluon.sqlhtml.SQLFORM object>, request_vars=<Storage {'description': 'asdf', 'title': 'adsf'...aiku': '$% asd', '_formname': 'no_table/create'}>, session=<Storage {'_auth_next': None, 'flash': None, 'au...gin]': ['9500cb0a-b63e-41da-a396-268f83368d8b']}>, formname='no_table/create', keepvalues=False, onvalidation=<function create_haiku_check>, hideerror=False, **kwargs={})"
p246
sg85
g225
sa(dp247
g62
S'C:\\Users\\Jason\\Downloads\\web2py\\gluon\\html.py'
p248
sg64
(dp249
S'a'
S'(<gluon.sqlhtml.SQLFORM object>,)'
p250
sS'item'
p251
S'<function create_haiku_check>'
p252
sS'b'
g45
ssg70
I146
sg71
(dp253
I141
S''
sI142
S'def call_as_list(f, *a, **b):'
p254
sI143
S'    if not isinstance(f, (list, tuple)):'
p255
sI144
S'        f = [f]'
p256
sI145
S'    for item in f:'
p257
sI146
S'        item(*a, **b)'
p258
sI147
S''
sI148
S"def truncate_string(text, length, dots='...'):"
p259
sI149
S"    text = text.decode('utf-8')"
p260
sI150
S'    if len(text) > length:'
p261
ssg83
S'(f=[<function create_haiku_check>], *a=(<gluon.sqlhtml.SQLFORM object>,), **b={})'
p262
sg85
S'call_as_list'
p263
sa(dp264
g62
S'C:\\Users\\Jason\\Downloads\\web2py\\applications\\P2P\\controllers\\default.py'
p265
sg64
(dp266
S'REGEX'
p267
g106
sS're'
p268
g106
ssg70
I233
sg71
(dp269
I228
S"        redirect(URL('browse'))"
p270
sI229
S'    return locals()'
p271
sI230
S''
sI231
S'def create_haiku_check(form):'
p272
sI232
S'    # Check that user only uses english letters'
p273
sI233
S"    REGEX = re.compile('^[A-Za-z ]+$')"
p274
sI234
S'    match = REGEX.match(form.vars.start_haiku)'
p275
sI235
S'    if not match:'
p276
sI236
S"        form.errors.start_haiku = 'Please enter words totaling up to 5 syllables using only english alphabet and spaces'"
p277
sI237
S''
ssg83
S'(form=<gluon.sqlhtml.SQLFORM object>)'
p278
sg85
S'create_haiku_check'
p279
sasS'pyver'
p280
S'Python 2.7: C:\\Python27\\python.exe (prefix: C:\\Python27)'
p281
sS'session'
p282
g57
(S's\xed\t\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">auth</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">expiration</td><td style="vertical-align:top;">:</td><td><div>3600</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">hmac_key</td><td style="vertical-align:top;">:</td><td><div>efe04426-68bd-4665-ba7c-c46d2ecabc65</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_visit</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 3, 16, 6, 27, 33, 86000)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remember_me</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">user</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">allow_add</td><td style="vertical-align:top;">:</td><td><div>0L</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">email</td><td style="vertical-align:top;">:</td><td><div>1234@1234.mu</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">first_name</td><td style="vertical-align:top;">:</td><td><div>star</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">id</td><td style="vertical-align:top;">:</td><td><div>5L</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_name</td><td style="vertical-align:top;">:</td><td><div>lotulelei</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">registration_id</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">registration_key</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">reset_password_key</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">username</td><td style="vertical-align:top;">:</td><td><div>1234</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">user_groups</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">5</td><td style="vertical-align:top;">:</td><td><div>user_5</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr></table></div>'
tRp283
sS'etype'
p284
S"<type 'exceptions.NameError'>"
p285
sS'date'
p286
S'Wed Mar 16 06:29:33 2016'
p287
sS'response'
p288
g57
(S's\xfb\x1f\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x09E28B00&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_p2p</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-031e5f48-62e7-4da5-b2c6-af33f201f4d8<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">form_label_separator</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">formstyle</td><td style="vertical-align:top;">:</td><td><div>bootstrap3_inline</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>*</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">google_analytics_id</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">logo</td><td style="vertical-align:top;">:</td><td><div><a class="navbar-brand" id="web2py-logo"><b><span>P</span><span>2</span><span>P</span></b></a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>Home</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/P2P/default/index</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Browse Poems</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/P2P/default/browse</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Search Poems</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/P2P/default/search</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Profile</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/P2P/default/profile</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">author</td><td style="vertical-align:top;">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">description</td><td style="vertical-align:top;">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generator</td><td style="vertical-align:top;">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">keywords</td><td style="vertical-align:top;">:</td><td><div>web2py, python, framework</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^default/\\w+\\.py$</div></td></tr><tr><td><div>^default/create/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_key</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_p2p</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;C:\\Users\\Jason\\Downloads\\web2py\\applications\\P2P\\sessions\\190\\087\\127.0.0.1-031e5f48-62e7-4da5-b2c6-af33f201f4d8&#x27;, mode &#x27;rb+&#x27; at 0x0A429A18&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Jason\\Downloads\\web2py\\applications\\P2P\\sessions\\127.0.0.1-031e5f48-62e7-4da5-b2c6-af33f201f4d8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>87ec94395c039c4daa0be66987349c08</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-031e5f48-62e7-4da5-b2c6-af33f201f4d8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_p2p</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_locked</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>P2P</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">subtitle</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">title</td><td style="vertical-align:top;">:</td><td><div>P2P</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>default/create.html</div></td></tr></table></div>'
tRp289
sS'locals'
p290
(dp291
S'form'
p292
S'<gluon.sqlhtml.SQLFORM object>'
p293
sssS'traceback'
p294
S'Traceback (most recent call last):\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Jason\\Downloads\\web2py\\applications\\P2P\\controllers/default.py", line 744, in <module>\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\tools.py", line 4236, in f\n    return action(*a, **b)\n  File "C:\\Users\\Jason\\Downloads\\web2py\\applications\\P2P\\controllers/default.py", line 191, in create\n    form = SQLFORM.factory(db.poem, db.haiku, fields=[\'title\', \'description\', \'start_haiku\', \'permission\'],labels = {\'start_haiku\':\'Starting Words\'}).process(onvalidation = create_haiku_check)\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\html.py", line 2304, in process\n    self.validate(**kwargs)\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\html.py", line 2241, in validate\n    if self.accepts(**kwargs):\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\sqlhtml.py", line 1505, in accepts\n    **kwargs\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\html.py", line 2142, in accepts\n    call_as_list(onvalidation, self)\n  File "C:\\Users\\Jason\\Downloads\\web2py\\gluon\\html.py", line 146, in call_as_list\n    item(*a, **b)\n  File "C:\\Users\\Jason\\Downloads\\web2py\\applications\\P2P\\controllers/default.py", line 233, in create_haiku_check\n    REGEX = re.compile(\'^[A-Za-z ]+$\')\nNameError: global name \'re\' is not defined\n'
p295
s.