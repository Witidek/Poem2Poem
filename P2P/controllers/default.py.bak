# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a sample controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
#########################################################################
import datetime

def index():
    return locals()

def user():
    if request.args(0) == 'profile':
        redirect(URL('profile'))
    return dict(form=auth())

def browse():
    import math

    # Auto redirect to page 0 of table
    if request.args(0) == None:
        redirect(URL('browse',args = 0))

    # Calculate total number of pages
    row = db(db.poem).select()
    row_len = float(len(row))
    page_num = int(math.ceil(row_len / 15))
    if len(request.args):
        page = int(request.args[0])
    else:
        page = 0

    # Items displayed per page
    items_per_page = 15

    limitby = (page*items_per_page,(page+1)*items_per_page+1)
    rows=db().select(db.poem.ALL,limitby=limitby)
    return locals()

def search():
    rows = db(db.poem).select()
    searchKey = ""
    searchType = 'Poems'

    # Search form
    form = FORM('Search: ',
              INPUT(_name='search'),
              '    Search By:  ',
              INPUT(_type ='radio', _name = 'searchType', _value = 'Poems', _checked="checked"), '  Poems ',
              INPUT(_type ='radio', _name = 'searchType', _value = 'Authors'),'  Authors  ',
              INPUT(_type='submit'))
    if form.accepts(request,session):
        searchKey = form.vars.search
        searchType = form.vars.searchType

    return locals()
@auth.requires_login()
def poem():
    # Redirect to poem browser if no argument for poem id
    if not request.args(0): redirect(URL('browse'))

    # Load poem using the URL argument as poem id
    poem = db.poem(request.args(0,cast=int))
    rating = db(db.rating.poem_id == poem.id).select()
    # Displaying ABAB
    if (poem.category == '16 line ABAB rhyme') or (poem.category == '16 line AABB rhyme') or (poem.category == 'Sonnet') or (poem.category == 'Limerick') or (poem.category == 'AAAA'):
        abab = db(db.abab.poem_id == poem.id).select().first()
        lines = db(db.new_line.poem_id == poem.id).select(orderby=db.new_line.line_number)
        contributors = db(db.new_line.poem_id == poem.id).select(db.new_line.author, groupby=db.new_line.author)
    # Displaying Haiku
    elif (poem.category == 'Haiku') or (poem.category == '10 line Syllabic Verse') :
        haiku = db(db.haiku.poem_id == poem.id).select().first()
        words = db(db.new_word.poem_id == poem.id).select(orderby=db.new_word.word_number)
        contributors = db(db.new_word.poem_id == poem.id).select(db.new_word.author, groupby=db.new_word.author)
    elif poem.category == 'Acrostic':
        acrostic = db(db.acrostic.poem_id == poem.id).select().first()
        lines = db(db.new_line.poem_id == poem.id).select(orderby=db.new_line.line_number)
        contributors = db(db.new_line.poem_id == poem.id).select(db.new_line.author, groupby=db.new_line.author)

    # Form for adding contributors for a private poem
    forms = FORM('Username: ',
              INPUT(_name='username'),
              INPUT(_type='submit'))
    if forms.accepts(request,session):
        added = False
        for users in db(db.auth_user).select():
            if(users.username == forms.vars.username):
                for permission in db(db.permission).select():
                    if(permission.user_id == users.id and permission.poem_id == poem.id):
                        response.flash = 'Already Added'
                    else:
                        added = True
                if(added == True):
                    db.permission.insert(user_id = users.id , poem_id = poem.id)
                    response.flash = 'Added'
    return locals()

@auth.requires_login()
def delete_poem():
    poem_id = request.args(0,cast=int)
    poem = db.poem(poem_id)
    # Check if user is author of this poem
    if(poem.author == auth.user.id):
        poem.delete_record()
    redirect(URL('browse',args = 0))
    return locals()

def count_syllables(str):
    import urllib
    import urllib2
    from gluon.contrib import simplejson

    # GET JSONP from RhymeBrain API and parse
    url = 'http://rhymebrain.com/talk'
    data = {}
    data['function'] = 'getWordInfo'
    data['word'] = str
    url_values = urllib.urlencode(data)
    full_url = url + '?' + url_values
    data = urllib2.urlopen(full_url)
    result = data.read()
    parsed_json = simplejson.loads(result)

    # Return number of syllables cast as int
    return int(parsed_json['syllables'])

def upVoteFunny():
    poem = db.poem(request.args(0,cast=int))
    db.rating.insert(poem_id = poem.id, voteFunny = 1)
    redirect(URL('poem',args = [request.args(0)]))
    return locals()

def unVoteFunny():
    poem = db.poem(request.args(0,cast=int))
    db((db.rating.author == auth.user) and (db.rating.poem_id == poem.id) and (db.rating.voteFunny == 1)).delete()
    redirect(URL('poem',args = [request.args(0)]))
    return locals()

def upVoteInteresting():
    poem = db.poem(request.args(0,cast=int))
    db.rating.insert(poem_id = poem.id, voteInteresting = 1)
    redirect(URL('poem',args = [request.args(0)]))
    return locals()

def unVoteInteresting():
    poem = db.poem(request.args(0,cast=int))
    db((db.rating.author == auth.user) and (db.rating.poem_id == poem.id) and (db.rating.voteInteresting == 1)).delete()
    redirect(URL('poem',args = [request.args(0)]))
    return locals()

def upVoteCool():
    poem = db.poem(request.args(0,cast=int))
    db.rating.insert(poem_id = poem.id, voteCool = 1)
    redirect(URL('poem',args = [request.args(0)]))
    return locals()

def unVoteCool():
    poem = db.poem(request.args(0,cast=int))
    db((db.rating.author == auth.user) and (db.rating.poem_id == poem.id) and (db.rating.voteCool == 1)).delete()
    redirect(URL('poem',args = [request.args(0)]))
    return locals()

@auth.requires_login()
def create():
    # Redirect to poem browser if no argument for poem type
    if not request.args(0): redirect(URL('browse'))

    # Create form for 16 line ABAB rhyme
    if (request.args(0) == 'abab') or (request.args(0) == 'aabb') or (request.args(0) == 'sonnet') or (request.args(0) == 'limerick') or (request.args(0) == 'aaaa'):
        form = SQLFORM.factory(db.poem, db.abab, fields=['title', 'description', 'body', 'permission']).process()
        if request.args(0) == 'aabb': form.vars.category = '16 line AABB rhyme'
        elif request.args(0) == 'sonnet': form.vars.category = 'Sonnet'
        elif request.args(0) == 'limerick': form.vars.category = 'Limerick'
        elif request.args(0) == 'aaaa' : form.vars.category = 'AAAA'
        if form.accepted:
            # Do an insert if ABAB
            id = db.poem.insert(**db.poem._filter_fields(form.vars))
            db.abab.insert(poem_id = db.poem(id), body = form.vars.body)
            # Create new mutex for this poem
            db.mutex.insert(poem_id = id, editing = False, edit_timestamp = request.now, ping_timestamp = request.now)
            # Create a new insert into permission table if poem was created Private (give owner permission)
            if form.vars.permission == 'Private':
                db.permission.insert(user_id = auth.user, poem_id = id)
            redirect(URL('poem', args=id))
    # Create form for haiku
    elif (request.args(0) == 'haiku') or (request.args(0) == 'syllabic'):
        if request.args(0) == 'haiku':
            form = SQLFORM.factory(db.poem, db.haiku, fields=['title', 'description', 'start_haiku', 'permission'],labels = {'start_haiku':'Starting Words'}).process(onvalidation = create_haiku_check)
            form.vars.category = 'Haiku'
        elif request.args(0) == 'syllabic':
            form = SQLFORM.factory(db.poem, db.haiku, fields=['title', 'description', 'start_haiku', 'permission'],labels = {'start_haiku':'Starting Word'}).process(onvalidation = create_syllabic_check)
            form.vars.category = '10 line Syllabic Verse'
        if form.accepted:
            word_list = str(form.vars.start_haiku).split(' ')
            word_count = len(word_list)
            syllable_count = 0
            for word in word_list:
                syllable_count += count_syllables(word)

            id = db.poem.insert(**db.poem._filter_fields(form.vars))
            db.haiku.insert(poem_id = id, start_haiku = form.vars.start_haiku, word_count = word_count, syllable_count = syllable_count, body_syllable_count = syllable_count)

            # Create new mutex for this poem
            db.mutex.insert(poem_id = id, editing = False, edit_timestamp = request.now, ping_timestamp = request.now)

            # Create a new insert into permission table if poem was created Private (give owner permission)
            if form.vars.permission == 'Private':
                db.permission.insert(user_id = auth.user, poem_id = form.vars.id)
            redirect(URL('poem', args=id))
    elif request.args(0) == 'acrostic':
        form = SQLFORM.factory(db.poem, db.acrostic, fields=['title', 'description', 'word', 'permission']).process()
        form.vars.category = 'Acrostic'
        if form.accepted:
            # Do an insert if Acrostic
            id = db.poem.insert(**db.poem._filter_fields(form.vars))
            db.acrostic.insert(poem_id = db.poem(id), word = form.vars.word)

            # Create new mutex for this poem
            db.mutex.insert(poem_id = id, editing = False, edit_timestamp = request.now, ping_timestamp = request.now)
            # Create a new insert into permission table if poem was created Private (give owner permission)
            if form.vars.permission == 'Private':
                db.permission.insert(user_id = auth.user, poem_id = id)
            redirect(URL('poem', args=id))
    else:
        redirect(URL('browse'))
    return locals()

def create_haiku_check(form):
    # Check that user only uses english letters
    REGEX = re.compile('^[A-Za-z ]+$')
    match = REGEX.match(form.vars.start_haiku)
    if not match:
        form.errors.start_haiku = 'Please enter words totaling up to 5 syllables using only english alphabet and spaces'

    # Split line into words
    word_list = str(form.vars.start_haiku).split(' ')

    # Count syllables
    syllable_count = 0
    for word in word_list:
        syllable_count += count_syllables(word)
        if syllable_count > 5:
            form.errors.start_haiku = 'Too many Syllables (5 Max)'

def create_syllabic_check (form):
    # Check that user only uses english letters
    REGEX = re.compile('^[A-Za-z]+$')
    match = REGEX.match(form.vars.start_haiku)
    if not match:
        form.errors.start_haiku = 'Please enter a single syllable word using only english alphabet'

    # Split line into words
    word_list = str(form.vars.start_haiku).split(' ')

    # Count syllables
    syllable_count = 0
    for word in word_list:
        syllable_count += count_syllables(word)
        if syllable_count > 1:
            form.errors.start_haiku = 'Too many Syllables (1 Max)'

# See below for info about edit
def edit():
    redirect(URL('index'))

"""
# edit() deprecated, replaced with poem owners just being allowed to add permissions to edit if private, and also
# poem owners can delete their own poems entirely

@auth.requires_login()
def edit():
    # Redirect to poem browser if no argument for poem id
    if not request.args(0): redirect(URL('browse'))

    # Load poem using the URL argument as poem id
    poem_id = request.args(0,cast=int)
    poem = db.poem(poem_id)

    # Displaying ABAB
    if (poem.category == '16 line ABAB rhyme') or (poem.category == '16 line AABB rhyme') or (poem.category == 'Sonnet'):
        abab = db(db.abab.poem_id == poem.id).select().first()
        lines = db(db.new_line.poem_id == poem.id).select(orderby=db.new_line.line_number)
        contributors = db(db.new_line.poem_id == poem.id).select(db.new_line.author, groupby=db.new_line.author)
    # Displaying Haiku
    elif poem.category == 'Haiku':
        haiku = db(db.haiku.poem_id == poem.id).select().first()
        words = db(db.new_word.poem_id == poem.id).select(orderby=db.new_word.word_number)
        contributors = db(db.new_word.poem_id == poem.id).select(db.new_word.author, groupby=db.new_word.author)

    # Redirect if current user is not owner of poem
    if poem.author != auth.user.id:
        session.flash = 'You are not the owner of this poem and cannot edit it'
        redirect(URL('poem',args=poem.id))

    # Create SQLFORM
    form = SQLFORM(db.poem, record=poem, fields=['title','description']).process()
    if (poem.category == '16 line ABAB rhyme') or (poem.category == '16 line AABB rhyme') or (poem.category == 'Sonnet') or (poem.category == 'Limerick') or (poem.category == 'aaaa'):
        lines = db(db.new_line.poem_id == poem_id).select(orderby=db.new_line.line_number)
        lines_form = []
        line_form = []
        for line in lines:
            delete_form = FORM(INPUT(_name="line_id", _type='hidden',value=line.id), INPUT(_type='submit', _value = 'Delete')).process(onvalidation=delete_line)
            delete_form.vars.line = line.line
            lines_form.append(delete_form)
            print line.id
            line_form.append(line.line)
    elif poem.category == 'Haiku':
        word = db(db.new_word.poem_id == poem_id).select(orderby=db.new_word.word_number)
        words_form = []
        word_form = []
        for word in words:
            delete_word_form = FORM(INPUT(_name="word_id", _type='hidden',value=word.id), INPUT(_type='submit', _value = 'Delete')).process(onvalidation=delete_word, next=URL('edit', args=poem.id))
            delete_word_form.vars.word = word.word
            words_form.append(delete_word_form)
            word_form.append(word.word)

    if form.accepted:
        redirect(URL('browse'))

    forms = FORM('Username: ',
              INPUT(_name='username'),
              INPUT(_type='submit'))
    if forms.accepts(request,session):
        added = False
        for users in db(db.auth_user).select():
            if(users.username == forms.vars.username):
                for permission in db(db.permission).select():
                    if(permission.user_id == users.id and permission.poem_id == poem.id):
                        response.flash = 'Already Added'
                    else:
                        added = True
                if(added == True):
                    db.permission.insert(user_id = users.id , poem_id = poem.id)
                    response.flash = 'Added'
    return locals()
"""

def delete_line(form):
    print 'deleting' + form.vars.line_id
    row = db(db.new_line.id == form.vars.line_id).select().first()
    row.update_record(line = '')

def delete_word(form):
    print form.vars.word_id
    word = db(db.new_word.id == form.vars.word_id).select().first()
    word.update_record(word = '')

@auth.requires_login()
def add_check():
    # Redirect to poem browser if no argument for poem id
    if not request.args(0): redirect(URL('browse'))
    poem_id = request.args(0,cast=int)
    poem = db.poem(poem_id)
    mutex = db(db.mutex.poem_id == poem_id).select().first()

    # Check if poem is private and if current user has proper permissions, redirect if no permission
    if poem.permission == 'Private':
        print 'private'
        print db(db.permission.poem_id == poem.id).select().first().user_id
        print auth.user.id
        if not db((db.permission.poem_id == poem.id) & (db.permission.user_id == auth.user_id)).select():
            session.flash = 'You do not have permission to add to this poem'
            redirect(URL('poem', args=poem.id))

    # Check and redirect if another user is currently trying to add a line for this poem
    if mutex.editing:
        edit_timestamp = mutex.edit_timestamp
        minutes_elapsed = (datetime.datetime.now() - edit_timestamp).total_seconds() / 60
        if minutes_elapsed < 5.0:
            ping_timestamp = mutex.ping_timestamp
            seconds_elapsed = (datetime.datetime.now() - ping_timestamp).total_seconds()
            if seconds_elapsed <= 30.0:
                session.flash = 'A user is currently adding a line!'
                redirect(URL('poem', args=poem_id))

    # Lock mutex and allow user to add to that poem with a session variable
    mutex.update_record(editing = True, edit_timestamp = request.now, ping_timestamp = request.now)
    db.auth_user(auth.user.id).update_record(allow_add = 2)
    redirect(URL('add', args=poem_id, user_signature=True))

def add_ping():
    if request.vars.poem_id:
        poem_id = request.vars.poem_id
        mutex = db(db.mutex.poem_id == poem_id).select().first()
        mutex.update_record(ping_timestamp = request.now)

def unlocked_mutex():
    # Unlock a mutex using argument as poem id
    if not request.args(0): redirect(URL('browse'))
    poem_id = request.args(0,cast=int)
    mutex = db(db.mutex.poem_id == poem_id).select().first()

@auth.requires_login()
def add():
    import urllib
    import urllib2
    from gluon.contrib import simplejson

    # Redirect to poem browser if no argument for poem id
    if not request.args(0):
        redirect(URL('browse'))

    # Check that allow_add is valid for this user, meaning they passed add_check() validation
    poem_id = request.args(0,cast=int)
    allow_add = db.auth_user(auth.user.id).allow_add
    if allow_add > 0:
        allow_add -= 1
        db.auth_user(auth.user.id).update_record(allow_add = allow_add)
    else:
        redirect(URL('browse'))

    # Load poem using the URL argument as poem id
    poem = db.poem(request.args(0,cast=int))

    # Add form for ABAB
    if (poem.category == '16 line ABAB rhyme') or (poem.category == '16 line AABB rhyme') or (poem.category == 'Sonnet') or (poem.category == 'Limerick') or (poem.category == 'AAAA'):
        abab = db(db.abab.poem_id == poem.id).select().first()
        lines = db(db.new_line.poem_id == poem.id).select(orderby=db.new_line.line_number)
        if (poem.category == '16 line ABAB rhyme') or ((poem.category == 'Sonnet') and (abab.line_count < 12)):
        # Grab last word in the second to last line to rhyme by default (for ABAB rhyme scheme)
            rhyme_word = ''
            if abab.line_count == 2:
                rhyme_word = abab.body.splitlines()[0].split(' ')[-1]
            elif abab.line_count == 3:
                rhyme_word = abab.body.splitlines()[1].split(' ')[-1]
            else:
                rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == abab.line_count-1)).select().first()
                rhyme_word = rhyme_line.line.split(' ')[-1]
        elif (poem.category == 'Sonnet') and (abab.line_count > 11):
            rhyme_word = ''
            rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == abab.line_count)).select().first()
            rhyme_word = rhyme_line.line.split(' ')[-1]
        elif (poem.category == '16 line AABB rhyme') or ((poem.category == 'Limerick') and (abab.line_count+1 < 5)):
            rhyme_word = ''
            if abab.line_count == 2:
                rhyme_word = ''
            else:
                rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == abab.line_count)).select().first()
                rhyme_word = rhyme_line.line.split(' ')[-1]
        elif (poem.category == 'Limerick') and (abab.line_count+1 > 4):
            rhyme_word = ''
            rhyme_word = abab.body.splitlines()[0].split(' ')[-1]
        elif poem.category == 'AAAA':
            rhyme_word = ''
            if abab.line_count == 2:
                rhyme_word = abab.body.splitlines()[1].split(' ')[-1]
            else:
                rhyme_word = ''
                rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == abab.line_count)).select().first()
                rhyme_word = rhyme_line.line.split(' ')[-1]
        #Get use the rhymebrain API
        url = 'http://rhymebrain.com/talk'
        data = {}
        data['function'] = 'getRhymes'
        data['word'] = rhyme_word
        url_values = urllib.urlencode(data)
        full_url = url + '?' + url_values
        data = urllib2.urlopen(full_url)
        result = data.read()
        parsed_json = simplejson.loads(result)

        sorted_syllables = [[] for x in range(11)]
        for entry in parsed_json:
            syllable_count = int(entry['syllables'])
            word = str(entry['word'].encode('utf-8',"ignore"))
            sorted_syllables[syllable_count].append(word)

        # Create SQLFORM for the user to add a single line as a String
        form = SQLFORM(db.new_line, fields=['line'])
        form.vars.poem_id = poem.id
        form.vars.line_number = abab.line_count + 1

        form.process()
        if form.accepted:
            abab.update_record(line_count = abab.line_count + 1)
            mutex = db(db.mutex.poem_id == poem.id).select().first()
            mutex.update_record(editing = False)
            redirect(URL('poem', args=poem.id))
        elif form.errors:
            allow_add = db.auth_user(auth.user.id).allow_add + 1
            db.auth_user(auth.user.id).update_record(allow_add = allow_add)
    # Add form for Acrostic
    elif (poem.category == 'Acrostic'):
        acrostic = db(db.acrostic.poem_id == poem.id).select().first()
        lines = db(db.new_line.poem_id == poem.id).select(orderby=db.new_line.line_number)
        # Create SQLFORM for the user to add a single line as a String
        form = SQLFORM(db.new_line, fields=['line'])
        form.vars.poem_id = poem.id
        form.vars.line_number = acrostic.line_count + 1

        form.process(onvalidation = add_acrostic_check)
        if form.accepted:
            acrostic.update_record(line_count = acrostic.line_count + 1)
            mutex = db(db.mutex.poem_id == poem.id).select().first()
            mutex.update_record(editing = False)
            redirect(URL('poem', args=poem.id))
        elif form.errors:
            allow_add = db.auth_user(auth.user.id).allow_add + 1
            db.auth_user(auth.user.id).update_record(allow_add = allow_add)
    # Add form for Haiku
    elif(poem.category == 'Haiku') or (poem.category == '10 line Syllabic Verse'):
        haiku = db(db.haiku.poem_id == poem.id).select().first()
        words = db(db.new_word.poem_id == poem.id).select(orderby=db.new_word.word_number)
        form = SQLFORM(db.new_word, fields=['word'])
        form.vars.poem_id = poem.id
        form.vars.word_number = haiku.word_count + 1
        syllables_left = 0
        if poem.category == 'Haiku':
            if haiku.syllable_count < 5:
                form.vars.line_count = 1
                syllables_left = 5 - haiku.syllable_count
            elif 5 <= haiku.syllable_count <=11:
                form.vars.line_count = 2
                syllables_left = 12 - haiku.syllable_count
            elif 11 < haiku.syllable_count:
                form.vars.line_count = 3
                syllables_left = 17 - haiku.syllable_count
            form.process(onvalidation = add_haiku_check)
        elif poem.category == '10 line Syllabic Verse':
            if haiku.syllable_count < 3:
                form.vars.line_count = 2
                syllables_left = 3 - haiku.syllable_count
            elif 3 <= haiku.syllable_count <=5:
                form.vars.line_count = 3
                syllables_left = 6 - haiku.syllable_count
            elif 5 < haiku.syllable_count <= 9:
                form.vars.line_count = 4
                syllables_left = 10 - haiku.syllable_count
            elif 9 < haiku.syllable_count <= 14:
                form.vars.line_count = 5
                syllables_left = 15 - haiku.syllable_count
            elif 14 < haiku.syllable_count <= 20:
                form.vars.line_count = 6
                syllables_left = 21 - haiku.syllable_count
            elif 20 < haiku.syllable_count <= 27:
                form.vars.line_count = 7
                syllables_left = 28 - haiku.syllable_count
            elif 27 < haiku.syllable_count <= 35:
                form.vars.line_count = 8
                syllables_left = 36 - haiku.syllable_count
            elif 35 < haiku.syllable_count <= 44:
                form.vars.line_count = 9
                syllables_left = 45 - haiku.syllable_count
            elif 44 < haiku.syllable_count:
                form.vars.line_count = 10
                syllables_left = 55 - haiku.syllable_count
            form.process(onvalidation = add_syllabic_check)

        if form.accepted:
            syllable_count = count_syllables(form.vars.word)
            db.new_word(form.vars.id).update_record(syllables = syllable_count)
            haiku.update_record(word_count = haiku.word_count + 1, syllable_count = haiku.syllable_count + syllable_count)
            mutex = db(db.mutex.poem_id == poem.id).select().first()
            mutex.update_record(editing=False)
            redirect(URL('poem', args=poem.id))
        elif form.errors:
            allow_add = db.auth_user(auth.user.id).allow_add + 1
            db.auth_user(auth.user.id).update_record(allow_add = allow_add)

    return locals()

def add_haiku_check(form):
    haiku = db(db.haiku.poem_id == form.vars.poem_id).select().first()

    # Calculate how many syllables left in current line for haiku
    syllables_left = 0
    if haiku.syllable_count < 5:
        syllables_left = 5 - haiku.syllable_count
    elif 5 <= haiku.syllable_count <=11:
        syllables_left = 12 - haiku.syllable_count
    elif 11 < haiku.syllable_count:
        syllables_left = 17 - haiku.syllable_count

    # Error if word that user input has too many syllables
    if count_syllables(form.vars.word) > syllables_left:
        form.errors.word = 'Word has too many syllables for this line'

def add_syllabic_check(form):
    haiku = db(db.haiku.poem_id == form.vars.poem_id).select().first()

    # Calculate how many syllables left in current line for syllablic
    syllables_left = 0
    if haiku.syllable_count < 3:
        syllables_left = 3 - haiku.syllable_count
    elif 3 <= haiku.syllable_count <= 5:
        syllables_left = 6 - haiku.syllable_count
    elif 5 < haiku.syllable_count <= 9:
        syllables_left = 10 - haiku.syllable_count
    elif 9 < haiku.syllable_count <= 14:
        syllables_left = 15 - haiku.syllable_count
    elif 14 < haiku.syllable_count <= 20:
        syllables_left = 21 - haiku.syllable_count
    elif 20 < haiku.syllable_count <= 27:
        syllables_left = 28 - haiku.syllable_count
    elif 27 < haiku.syllable_count <= 35:
        syllables_left = 36 - haiku.syllable_count
    elif 35 < haiku.syllable_count <= 44:
        syllables_left = 45 - haiku.syllable_count
    elif 44 < haiku.syllable_count:
        syllables_left = 55 - haiku.syllable_count

    # Error if word that user input has too many syllables
    if count_syllables(form.vars.word) > syllables_left:
        form.errors.word = 'Word has too many syllables for this line'

def add_acrostic_check (form):
    acrostic = db(db.acrostic.poem_id == form.vars.poem_id).select().first()
    check_acrostic = list(acrostic.word)[acrostic.line_count]
    if (check_acrostic.lower() != form.vars.line[0][0].lower()):
        form.errors.line = 'Does not start with the right letter'

def specialadd():
    redirect(URL('index'))

"""
# specialadd() deprecated along with edit()

@auth.requires_login()
def specialadd():
    import urllib
    import urllib2
    from gluon.contrib import simplejson

    # Redirect to poem browser if no argument for poem id
    if not request.args(0): redirect(URL('browse'))
    lineNumber = request.args(1,cast = int)
    # Load poem using the URL argument as poem id
    poem = db.poem(request.args(0,cast=int))
    rows = db(db.new_line.poem_id == poem.id).select(orderby=db.new_line.line_number)
    check = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == request.args(1))).select().first()
    if check:
        if not check.line == '':
            redirect(URL('browse'))
    # Check if poem is private and if current user has proper permissions, redirect if no permission
    if poem.permission == 'Private':
        print 'private'
        print db(db.permission.poem_id == poem.id).select().first().user_id
        print auth.user.id
        if not db((db.permission.poem_id == poem.id) & (db.permission.user_id == auth.user_id)).select():
            session.flash = 'You do not have permission to add to this poem'
            redirect(URL('poem', args=poem.id))

    # Add form for ABAB
    if (poem.category == '16 line ABAB rhyme') or (poem.category == '16 line AABB rhyme') or (poem.category == 'Sonnet') or (poem.category == 'Limerick') or (poem.category == 'AAAA'):
        abab = db(db.abab.poem_id == poem.id).select().first()
        lines = db(db.new_line.poem_id == poem.id).select(orderby=db.new_line.line_number)
        if poem.category == '16 line ABAB rhyme':
            # Grab last word in the second to last line to rhyme by default (for ABAB rhyme scheme)
            rhyme_word = ''
            rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == lineNumber+2)).select().first()
            test = False
            if lineNumber-1 == 2:
                rhyme_word = abab.body.splitlines()[0].split(' ')[-1]
            elif lineNumber-1 == 3:
                rhyme_word = abab.body.splitlines()[1].split(' ')[-1]
            elif rhyme_line:
                rhyme_word = rhyme_line.line.split(' ')[-1]
                test = True
            else:
                rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == lineNumber-2)).select().first()
                rhyme_word = rhyme_line.line.split(' ')[-1]

        elif poem.category == '16 line AABB rhyme':
            # Grab last word in the second to last line to rhyme by default (for ABAB rhyme scheme)
            rhyme_word = ''
            rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == lineNumber+1)).select().first()
            test = False
            if (lineNumber % 4 == 0) or (lineNumber % 4 == 2):
                rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == lineNumber-1)).select().first()
                rhyme_word = rhyme_line.line.split(' ')[-1]
            elif rhyme_line:
                rhyme_word = rhyme_line.line.split(' ')[-1]
                test = True
        elif poem.category == 'Limerick':
             # Grab last word in the second to last line to rhyme by default (for ABAB rhyme scheme)
            rhyme_word = ''
            rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == lineNumber+1)).select().first()
            test = False
            if (lineNumber % 4 == 0) or (lineNumber % 4 == 2):
                rhyme_line = db((db.new_line.poem_id == poem.id) & (db.new_line.line_number == lineNumber-1)).select().first()
                rhyme_word = rhyme_line.line.split(' ')[-1]
            elif rhyme_line:
                rhyme_word = rhyme_line.line.split(' ')[-1]
                test = True
        #Get use the rhymebrain API
        url = 'http://rhymebrain.com/talk'
        data = {}
        data['function'] = 'getRhymes'
        data['word'] = rhyme_word
        url_values = urllib.urlencode(data)
        full_url = url + '?' + url_values
        data = urllib2.urlopen(full_url)
        result = data.read()
        parsed_json = simplejson.loads(result)

        sorted_syllables = [[] for x in range(11)]
        for entry in parsed_json:
            syllable_count = int(entry['syllables'])
            word = str(entry['word'].encode('utf-8',"ignore"))
            sorted_syllables[syllable_count].append(word)

        # Create SQLFORM for the user to add a single line as a String
        form = FORM(INPUT(_name = "line"),
               INPUT(_type="submit",_value = "Add"))
        if form.accepts(request,session):
            response.flash = form.vars.line
            if rows:
                update = db((db.new_line.line == '') & (db.new_line.line_number == request.args(1))).select().first()
                update.update_record(line = form.vars.line)
                update.update_record(author = auth.user.id)
                redirect(URL('poem', args=poem.id))

    # Add form for Haiku
    elif poem.category == 'Haiku':
        haiku = db(db.haiku.poem_id == poem.id).select().first()
        words = db(db.new_word.poem_id == poem.id).select(orderby=db.new_word.word_number)
        # Create SQLFORM for the user to add a single line as a String
        form = FORM(INPUT(_name = "word"),
               INPUT(_type="submit",_value = "Add"))
        if form.accepts(request,session):
            response.flash = form.vars.word
            if words:
                update = db((db.new_word.word == '') & (db.new_word.word_number == request.args(1))).select().first()
                update.update_record(word = form.vars.word)
                update.update_record(author = auth.user.id)
                redirect(URL('poem', args=poem.id))
    return locals()
"""

def pick():
    return locals()

@auth.requires_login()
def profile():
    user = auth.user
    poem = db.poem
    poems_owned = db(db.poem.author == user.id).select()
    poems_contributed = db((db.new_line.author == user.id) & (db.poem.id == db.new_line.poem_id)).select(groupby=db.poem.id)
    return locals()
